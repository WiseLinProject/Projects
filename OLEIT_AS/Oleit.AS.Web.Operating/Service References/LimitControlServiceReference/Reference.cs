//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Accounting_System.LimitControlServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LimitControlServiceReference.ILimitControlService")]
    public interface ILimitControlService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/DoWork", ReplyAction="http://tempuri.org/ILimitControlService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/getMenuByUserID", ReplyAction="http://tempuri.org/ILimitControlService/getMenuByUserIDResponse")]
        Oleit.AS.Service.DataObject.FuncMenu[] getMenuByUserID(string UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/getUserFunctions", ReplyAction="http://tempuri.org/ILimitControlService/getUserFunctionsResponse")]
        System.Collections.Generic.Dictionary<int, string> getUserFunctions(string UserID, string MenuID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/getUserFunctionByMenuID", ReplyAction="http://tempuri.org/ILimitControlService/getUserFunctionByMenuIDResponse")]
        System.Collections.Generic.Dictionary<int, string> getUserFunctionByMenuID(string MenuID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/insertUserFunction", ReplyAction="http://tempuri.org/ILimitControlService/insertUserFunctionResponse")]
        bool insertUserFunction(string UserID, string FunctionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/deleteUserFunction", ReplyAction="http://tempuri.org/ILimitControlService/deleteUserFunctionResponse")]
        bool deleteUserFunction(string UserID, string FunctionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/insertMenuToRole", ReplyAction="http://tempuri.org/ILimitControlService/insertMenuToRoleResponse")]
        bool insertMenuToRole(string MenuID, string RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/insertRoleToUser", ReplyAction="http://tempuri.org/ILimitControlService/insertRoleToUserResponse")]
        bool insertRoleToUser(string UserID, string RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/isFunctionAuthorized", ReplyAction="http://tempuri.org/ILimitControlService/isFunctionAuthorizedResponse")]
        bool isFunctionAuthorized(string UserID, string FunctionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILimitControlService/getUserRole", ReplyAction="http://tempuri.org/ILimitControlService/getUserRoleResponse")]
        string[] getUserRole(string userID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILimitControlServiceChannel : Accounting_System.LimitControlServiceReference.ILimitControlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LimitControlServiceClient : System.ServiceModel.ClientBase<Accounting_System.LimitControlServiceReference.ILimitControlService>, Accounting_System.LimitControlServiceReference.ILimitControlService {
        
        public LimitControlServiceClient() {
        }
        
        public LimitControlServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LimitControlServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LimitControlServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LimitControlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public Oleit.AS.Service.DataObject.FuncMenu[] getMenuByUserID(string UserID) {
            return base.Channel.getMenuByUserID(UserID);
        }
        
        public System.Collections.Generic.Dictionary<int, string> getUserFunctions(string UserID, string MenuID) {
            return base.Channel.getUserFunctions(UserID, MenuID);
        }
        
        public System.Collections.Generic.Dictionary<int, string> getUserFunctionByMenuID(string MenuID) {
            return base.Channel.getUserFunctionByMenuID(MenuID);
        }
        
        public bool insertUserFunction(string UserID, string FunctionID) {
            return base.Channel.insertUserFunction(UserID, FunctionID);
        }
        
        public bool deleteUserFunction(string UserID, string FunctionID) {
            return base.Channel.deleteUserFunction(UserID, FunctionID);
        }
        
        public bool insertMenuToRole(string MenuID, string RoleID) {
            return base.Channel.insertMenuToRole(MenuID, RoleID);
        }
        
        public bool insertRoleToUser(string UserID, string RoleID) {
            return base.Channel.insertRoleToUser(UserID, RoleID);
        }
        
        public bool isFunctionAuthorized(string UserID, string FunctionID) {
            return base.Channel.isFunctionAuthorized(UserID, FunctionID);
        }
        
        public string[] getUserRole(string userID) {
            return base.Channel.getUserRole(userID);
        }
    }
}
