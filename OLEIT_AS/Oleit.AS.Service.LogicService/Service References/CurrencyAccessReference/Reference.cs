//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oleit.AS.Service.LogicService.CurrencyAccessReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyAccessReference.ICurrencyAccess")]
    public interface ICurrencyAccess {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyAccess/Insert1", ReplyAction="http://tempuri.org/ICurrencyAccess/Insert1Response")]
        void Insert1(Oleit.AS.Service.DataObject.Currency currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyAccess/Insert2", ReplyAction="http://tempuri.org/ICurrencyAccess/Insert2Response")]
        void Insert2(Oleit.AS.Service.DataObject.Currency[] currencyCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyAccess/Query", ReplyAction="http://tempuri.org/ICurrencyAccess/QueryResponse")]
        Oleit.AS.Service.DataObject.Currency[] Query(string currencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyAccess/QueryAll", ReplyAction="http://tempuri.org/ICurrencyAccess/QueryAllResponse")]
        Oleit.AS.Service.DataObject.Currency[] QueryAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyAccess/Delete", ReplyAction="http://tempuri.org/ICurrencyAccess/DeleteResponse")]
        void Delete(Oleit.AS.Service.DataObject.Currency currency);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyAccessChannel : Oleit.AS.Service.LogicService.CurrencyAccessReference.ICurrencyAccess, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyAccessClient : System.ServiceModel.ClientBase<Oleit.AS.Service.LogicService.CurrencyAccessReference.ICurrencyAccess>, Oleit.AS.Service.LogicService.CurrencyAccessReference.ICurrencyAccess {
        
        public CurrencyAccessClient() {
        }
        
        public CurrencyAccessClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyAccessClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyAccessClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyAccessClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Insert1(Oleit.AS.Service.DataObject.Currency currency) {
            base.Channel.Insert1(currency);
        }
        
        public void Insert2(Oleit.AS.Service.DataObject.Currency[] currencyCollection) {
            base.Channel.Insert2(currencyCollection);
        }
        
        public Oleit.AS.Service.DataObject.Currency[] Query(string currencyID) {
            return base.Channel.Query(currencyID);
        }
        
        public Oleit.AS.Service.DataObject.Currency[] QueryAll() {
            return base.Channel.QueryAll();
        }
        
        public void Delete(Oleit.AS.Service.DataObject.Currency currency) {
            base.Channel.Delete(currency);
        }
    }
}
