//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oleit.AS.Service.LogicService.TransactionAccessReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TransactionAccessReference.ITransactionAccess")]
    public interface ITransactionAccess {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/QueryAll", ReplyAction="http://tempuri.org/ITransactionAccess/QueryAllResponse")]
        Oleit.AS.Service.DataObject.Transaction[] QueryAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/QueryByPeriodid", ReplyAction="http://tempuri.org/ITransactionAccess/QueryByPeriodidResponse")]
        Oleit.AS.Service.DataObject.Transaction[] QueryByPeriodid(int _periodid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/QueryByID", ReplyAction="http://tempuri.org/ITransactionAccess/QueryByIDResponse")]
        Oleit.AS.Service.DataObject.Transaction[] QueryByID(int _id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/InsertTransaction", ReplyAction="http://tempuri.org/ITransactionAccess/InsertTransactionResponse")]
        void InsertTransaction(Oleit.AS.Service.DataObject.Transaction _transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/InsertTransactionCollection", ReplyAction="http://tempuri.org/ITransactionAccess/InsertTransactionCollectionResponse")]
        void InsertTransactionCollection(Oleit.AS.Service.DataObject.Transaction[] _collection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/SetNotices", ReplyAction="http://tempuri.org/ITransactionAccess/SetNoticesResponse")]
        void SetNotices(int _id, int _userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/SetConfirm", ReplyAction="http://tempuri.org/ITransactionAccess/SetConfirmResponse")]
        void SetConfirm(int _id, int _userid, int _periodid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionAccess/Update", ReplyAction="http://tempuri.org/ITransactionAccess/UpdateResponse")]
        void Update(Oleit.AS.Service.DataObject.Transaction transaction);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransactionAccessChannel : Oleit.AS.Service.LogicService.TransactionAccessReference.ITransactionAccess, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactionAccessClient : System.ServiceModel.ClientBase<Oleit.AS.Service.LogicService.TransactionAccessReference.ITransactionAccess>, Oleit.AS.Service.LogicService.TransactionAccessReference.ITransactionAccess {
        
        public TransactionAccessClient() {
        }
        
        public TransactionAccessClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransactionAccessClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionAccessClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionAccessClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Oleit.AS.Service.DataObject.Transaction[] QueryAll() {
            return base.Channel.QueryAll();
        }
        
        public Oleit.AS.Service.DataObject.Transaction[] QueryByPeriodid(int _periodid) {
            return base.Channel.QueryByPeriodid(_periodid);
        }
        
        public Oleit.AS.Service.DataObject.Transaction[] QueryByID(int _id) {
            return base.Channel.QueryByID(_id);
        }
        
        public void InsertTransaction(Oleit.AS.Service.DataObject.Transaction _transaction) {
            base.Channel.InsertTransaction(_transaction);
        }
        
        public void InsertTransactionCollection(Oleit.AS.Service.DataObject.Transaction[] _collection) {
            base.Channel.InsertTransactionCollection(_collection);
        }
        
        public void SetNotices(int _id, int _userid) {
            base.Channel.SetNotices(_id, _userid);
        }
        
        public void SetConfirm(int _id, int _userid, int _periodid) {
            base.Channel.SetConfirm(_id, _userid, _periodid);
        }
        
        public void Update(Oleit.AS.Service.DataObject.Transaction transaction) {
            base.Channel.Update(transaction);
        }
    }
}
